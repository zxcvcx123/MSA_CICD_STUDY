plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'org.msa'
version = '0.1'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2024.0.0'
    }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
	
	/* config 서버를 이용하기 위해 추가*/
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	
	/* bootstrap yaml 파일을 이용하기 위해 추가  */
	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
	
	/* Spring Actuator yaml 설정파일을 서버 재시작 안하고 할 수 있게 가능 */
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	
	/* 유레카서버에서 보기위해 클라이언트 의존성 추가 */
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	
  	runtimeOnly 'org.postgresql:postgresql'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}
